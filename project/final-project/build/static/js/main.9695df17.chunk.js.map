{"version":3,"sources":["Header.jsx","Body.jsx","Footer.jsx","services.js","Logout.jsx","ParkPhoto.jsx","ParkDetails.jsx","CreatePage.jsx","ParksList.jsx","Welcome.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","Body","onExplore","onClick","Footer","onLogin","useState","error","setError","isLoading","setIsLoading","username","setUsername","placeholder","onChange","e","target","value","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","code","then","response","ok","json","result","fetchLogIn","err","Logout","onLogout","ParkPhoto","clickedParkId","imagePreviewUrl","setImagePreviewUrl","useEffect","width","height","src","ParkDetails","backToParksList","user","parkDetails","setParkDetails","reviewList","setReviewList","comment","setComment","parkId","park","comments","commentList","Object","values","slice","reverse","map","m","key","commentId","text","reviewer","timestamp","isLoggedIn","parkName","introduction","location","newComment","currentComments","CreatePage","changeParksList","offCreate","setParkName","setIntroduction","setLocation","url","setUrl","type","name","files","fetchAddPark","imageFile","formData","FormData","append","fetchAddPhoto","ParksList","onBack","parksList","setParksList","showDetails","setShowDetails","setClickedParkId","create","setCreate","parks","showParksList","id","author","currentList","Welcome","App","userState","setUserState","explore","setExplore","userInfo","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9695df17.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <h2>Welcome</h2>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport default function Body({onExplore}) {\n\n    return (\n        <div className=\"body\">\n            <h1 onClick={onExplore}>Explore Parks in Seattle</h1>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { fetchLogIn } from './services';\n\nexport default function Footer({ onLogin }) {\n\n    const [error, setError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [username, setUsername] = useState(\"\");\n\n    const performLogin = () => {\n        if (!username) {\n            setError(\"Please input username.\");\n            return;\n        }\n        setError('');\n        setIsLoading(true);\n\n        fetchLogIn(username)\n            .then(() => onLogin(username))\n            .catch((err) => {\n                setError(\"Login failed, please try again.\");\n                setIsLoading(false);\n            });\n    };\n\n\n    return (\n        <div className=\"footer\">\n            <p className=\"error\">{error}</p>\n            {isLoading ? <span>Loading...</span> :\n                <div className=\"login-form\">\n                    <h3>Sign in to explore</h3>\n                    <input className=\"login-input\" placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n                    <input className=\"login-input\" placeholder=\"Password\" />\n                    <button className=\"login-input\" onClick={performLogin}>Get started</button>\n                </div>}\n        </div>\n    );\n};\n","export const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return Promise.reject({ code: 'login-invalid' });\n            }\n            return response.json();\n        });\n};\n\nexport const fetchLogIn = (username) => {\n    return fetch('/login', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ username }),\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchLogOut = () => {\n    return fetch('/logout', {\n        method: 'POST'\n    }).then((response) => {\n        if (response.ok) {\n            return;\n        }\n    });\n};\n\nexport const fetchParks = () => {\n    return fetch('/parks', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchOnePark = (parkId) => {\n    return fetch(`/parks/${parkId}`, {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return Promise.reject({ code: 'error' });\n            }\n            return response.json();\n        });\n};\n\nexport const fetchAddPark = (parkName, introduction, location) => {\n    return fetch('/park', {\n      method: 'POST',\n      headers: new Headers({\n        'content-type': 'application/json',\n      }),\n      body: JSON.stringify({ parkName : parkName, introduction : introduction, location : location }),\n    })\n      .catch(() => {\n        return Promise.reject({ code: 'network-error' });\n      })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n      });\n  };\n\n  export const fetchAddComment = (text, parkId) => {\n    return fetch(`/comment/${parkId}`, {\n      method: 'POST',\n      headers: new Headers({\n        'content-type': 'application/json',\n      }),\n      body: JSON.stringify({ text: text}),\n    })\n      .catch(() => {\n        return Promise.reject({ code: 'network-error' });\n      })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n      });\n  };\n\n  export const fetchPhoto = (parkId) => {\n    return fetch(`/photo/${parkId}`, {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response;\n        });\n};\n\nexport const fetchAddPhoto = (parkId, imageFile) => {\n    const formData = new FormData();\n    formData.append('file', imageFile);\n    return fetch(`/photo/${parkId}`, {\n      method: 'POST',\n      body: formData,\n    })\n    .catch(() => {\n        return Promise.reject({ code: 'network-error' });\n      })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n      });\n  };","import React from 'react';\nimport { fetchLogOut } from './services';\n\nexport default function Logout({ onLogout }) {\n\n    const performLogout = () => {\n        fetchLogOut()\n            .then(() => onLogout());\n    };\n    return (\n        <div className=\"logout\">\n            <span onClick={performLogout}>Logout</span>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\n\nexport default function ParkPhoto({ clickedParkId }) {\n    const [imagePreviewUrl, setImagePreviewUrl] = useState('');\n\n    useEffect(() => {\n        const imageUrl = \"/photo/\" + clickedParkId;\n        setImagePreviewUrl(imageUrl);\n    }, []);\n\n    return (\n        <div>\n            <img width=\"500\" height=\"300\" src={imagePreviewUrl} />\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchOnePark, fetchAddComment } from './services';\nimport ParkPhoto from './ParkPhoto';\n\nexport default function ParkDetails({ backToParksList, clickedParkId, user }) {\n\n    const [parkDetails, setParkDetails] = useState({});\n    const [reviewList, setReviewList] = useState({});\n    const [comment, setComment] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    useEffect(() => {\n        fetchOnePark(clickedParkId)\n            .then(park => {\n                setParkDetails(park);\n                setReviewList(park.comments);\n            })\n    }, []);\n\n    const commentList = Object.values(reviewList).slice().reverse().map((m) => (\n        <li className=\"review-list\" key={m.commentId}>\n            <span className=\"review-text\">{m.text}</span>\n            <br />\n            <span className=\"reviewer\">{m.reviewer}</span><span className=\"review-time\">{m.timestamp}</span>\n        </li>\n    ));\n\n    const postComments = () => {\n        fetchAddComment(comment, clickedParkId)\n            .then((newComment) => {\n                const currentComments = { ...reviewList };\n                currentComments[newComment.commentId] = newComment;\n                setReviewList(currentComments);\n                setComment(\"\");\n            })\n            .catch((err) => {\n                setError(\"Can't send empty comment.\");\n            });\n    };\n\n    return (\n        <div>\n            {user.isLoggedIn ?\n                <div>\n                    <div className=\"details-panel\">\n                        <div className=\"detail-back\">\n                            <span onClick={backToParksList}>Back</span>\n                        </div>\n                        <h2>{parkDetails.parkName}</h2>\n                        <div className=\"park-info\">\n                            <div className=\"photo\">\n                                <ParkPhoto clickedParkId={clickedParkId} />\n                            </div>\n                            <div className=\"park-words\">\n                                <p className=\"park-introduction\">{parkDetails.introduction}</p>\n                                <label className=\"location-title\">Location: </label><span className=\"park-location\">{parkDetails.location}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"review-title\">\n                        <span>Reviews</span>\n                    </div>\n                    <div className=\"reviews\">\n                        {commentList}\n                    </div>\n                    <div>\n                        <div className=\"review-panel\">\n                            <textarea className=\"input-review\" value={comment} placeholder=\"Share your experience to help others.\"\n                                onChange={(e) => setComment(e.target.value)}></textarea>\n                            <span>{error}</span>\n                            <br />\n                            <button onClick={postComments}>Comment</button>\n                        </div>\n                    </div>\n                </div> :\n                <div>\n                    <div className=\"details-panel\">\n                        <div className=\"detail-back\">\n                            <span onClick={backToParksList}>Back</span>\n                        </div>\n                        <h2>{parkDetails.parkName}</h2>\n                        <div className=\"park-info\">\n                            <div className=\"photo\">\n                                <ParkPhoto clickedParkId={clickedParkId} />\n                            </div>\n                            <div className=\"park-words\">\n                                <p className=\"park-introduction\">{parkDetails.introduction}</p>\n                                <label className=\"location-title\">Location: </label><span className=\"park-location\">{parkDetails.location}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"review-title\">\n                        <span>Reviews</span>\n                    </div>\n                    <div className=\"reviews\">\n                        {commentList}\n                    </div>\n                </div>}\n        </div >\n    );\n};\n\n","import React, { useState } from 'react';\nimport { fetchAddPark, fetchAddPhoto } from './services';\n\nexport default function CreatePage({ changeParksList, offCreate }) {\n\n    const [parkName, setParkName] = useState(\"\");\n    const [introduction, setIntroduction] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [url, setUrl] = useState(\"\");\n\n    const postPark = () => {\n        if (!parkName || !introduction || !location || !url) {\n            setError(\"All fields are required, including park photo.\");\n            return;\n        }\n        fetchAddPark(parkName, introduction, location)\n            .then((park) => {\n                fetchAddPhoto(park.parkId, url)\n                    .then(() => {\n                        changeParksList(park);\n                        offCreate();\n                    })\n                    .catch(() => {\n                        setError(\"Failed to upload park photo.\");\n                    })\n            })\n            .catch((err) => {\n                setError(\"Failed to create park.\");\n            });\n    };\n\n    return (\n        <div className=\"create-page\">\n            <input className=\"input-name\" value={parkName} placeholder=\"Input park name.\"\n                onChange={(e) => setParkName(e.target.value)} />\n            <br />\n            <textarea className=\"input-park\" value={introduction} placeholder=\"Input detailed information to introduce this park.\"\n                onChange={(e) => setIntroduction(e.target.value)} />\n            <br />\n            <textarea className=\"input-park\" value={location} placeholder=\"Input the park location\"\n                onChange={(e) => setLocation(e.target.value)} />\n            <br />\n            <input className=\"input-file\" type=\"file\" name=\"name\" onChange={(e) => setUrl(e.target.files[0])} />\n            <span className=\"create-action\" onClick={postPark}>Post now</span><span className=\"create-action\" onClick={offCreate}>Back</span>\n            <p>{error}</p>\n        </div>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport { fetchParks } from './services';\nimport ParkDetails from './ParkDetails';\nimport CreatePage from './CreatePage';\n\nexport default function ParksList({ onBack, user }) {\n\n    const [parksList, setParksList] = useState({});\n    const [showDetails, setShowDetails] = useState(false);\n    const [clickedParkId, setClickedParkId] = useState(\"\");\n    const [create, setCreate] = useState(false);\n\n    useEffect(() => {\n        fetchParks()\n            .then(parks => {\n                setParksList(parks);\n            })\n    }, []);\n\n    const onShowDetails = (id) => {\n        setShowDetails(true);\n        setClickedParkId(id);\n    };\n\n    const backToParksList = () => {\n        setShowDetails(false);\n    };\n\n    const showParksList = Object.values(parksList).map((m) => (\n        <li className=\"parks-list\" key={m.parkId}>\n            <span className=\"park-name\" onClick={() => onShowDetails(m.parkId)}>{m.parkName}</span>\n            <br />\n            <span className=\"poster\"> Post by {m.author}</span><span className=\"post-time\"> {m.timestamp}</span>\n        </li>\n    ));\n\n    const changeParksList = (park) => {\n        const currentList = { ...parksList };\n        currentList[park.parkId] = park;\n        setParksList(currentList);\n    };\n\n    const onCreate = () => {\n        setCreate(true);\n    };\n\n    const offCreate = () => {\n        setCreate(false);\n    };\n\n    return (\n        <div className=\"list-page\">\n            {user.isLoggedIn && create ?\n                <CreatePage offCreate={offCreate}\n                    changeParksList={changeParksList} /> : showDetails ?\n                    <ParkDetails backToParksList={backToParksList}\n                        clickedParkId={clickedParkId}\n                        showDetails={showDetails}\n                        user={user}\n                        changeParksList={changeParksList} /> : user.isLoggedIn ?\n                        <div className=\"parks-panel\">\n                            <div className=\"home-button\">\n                                <span onClick={onBack}>Home</span>\n                            </div>\n                            <div className=\"create-button\">\n                                <span onClick={onCreate}>Create</span>\n                            </div>\n                            <div className=\"list-head\">\n                                <h1>Parks</h1>\n                            </div>\n                            <div className=\"list-panel\">\n                                {showParksList}\n                            </div>\n                        </div> : <div className=\"parks-panel\">\n                            <div className=\"home-button\">\n                                <span onClick={onBack}>Home</span>\n                            </div>\n                            <div className=\"list-head\">\n                                <h1>Parks</h1>\n                            </div>\n                            <div className=\"list-panel\">\n                                {showParksList}\n                            </div>\n                        </div>\n            }\n        </div>\n    );\n};","import React from 'react';\n\nexport default function Welcome() {\n    return (\n        <div className=\"welcome\">\n            <span>Start your journey!</span>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport Logout from './Logout';\nimport { fetchLoginStatus } from './services';\nimport ParksList from './ParksList';\nimport Welcome from './Welcome';\n\nfunction App() {\n\n  const [userState, setUserState] = useState({ isLoggedIn: false, username: \"\" });\n  const [explore, setExplore] = useState(false);\n\n  useEffect(() => {\n    fetchLoginStatus()\n      .then(userInfo => {\n        setUserState({\n          isLoggedIn: true,\n          username: userInfo.username,\n        });\n      });\n  }, []);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n      username: username,\n    });\n  };\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false,\n      username: \"\",\n    });\n  };\n\n  const onExplore = () => {\n    setExplore(true);\n  };\n\n  const backButtonHandler = () => {\n    setExplore(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {explore ? <ParksList onBack={backButtonHandler}\n        user={userState} /> : userState.isLoggedIn ?\n          <div className=\"home-page\">\n            <Header />\n            <Body onExplore={onExplore} />\n            <Logout onLogout={logout} />\n            <Welcome />\n          </div> :\n          <div className=\"home-page\">\n            <Header />\n            <Body onExplore={onExplore} />\n            <Footer user={userState} onLogin={login} />\n          </div>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
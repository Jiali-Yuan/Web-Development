{"version":3,"sources":["Login.jsx","services.js","MessagePanel.jsx","UserBar.jsx","Logout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Login","user","onLogin","useState","error","setError","isLoading","setIsLoading","username","setUsername","className","placeholder","onChange","e","target","value","onClick","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","code","then","response","ok","json","result","fetchLogIn","err","message","MessagePanel","messageList","setMessageList","newMessage","setNewMessage","useEffect","messages","addNewMessage","text","push","showMessageList","map","m","key","timestamp","sender","onKeyPress","UserBar","userList","setUserList","users","usernames","Object","values","uid","Logout","onLogout","App","isLoggedIn","userState","setUserState","userInfo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bdc65b1a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { fetchLogIn } from './services';\nimport './App.css';\n\nconst Login = ({ user, onLogin }) => {\n    const [error, setError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [username, setUsername] = useState(\"\");\n\n    const performLogin = () => {\n        if (!username) {\n            setError(\"No username.\");\n            return;\n        }\n        setError('');\n        setIsLoading(true);\n\n        fetchLogIn(username)\n            .then(() => onLogin(username))\n            .catch((err) => {\n                setError(err.message);\n                setIsLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"login\">\n            <p className=\"error\">{error}</p>\n            {isLoading ? <span>Loading...</span> :\n                <div>\n                    <p>Join the chat room</p>\n                    <div className=\"input-username\">\n                    <input placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n                    <button onClick={performLogin} >Login</button>\n                    </div>\n                </div>}\n        </div>\n    );\n};\n\nexport default Login;","export const fetchLogIn = (username) => {\n  return fetch('/login', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ username }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLoginStatus = () => {\n  return fetch('/session', {\n    method: 'GET',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return Promise.reject({ code: 'login-invalid' });\n      }\n      return response.json();\n    });\n};\n\n\nexport const fetchAddNewMessage = (text) => {\n  return fetch('/addMessage', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ text: text }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchActiveUsers = () => {\n  return fetch('/activeUsers', {\n    method: 'GET',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n}\n\nexport const fetchMessages = () => {\n  return fetch('/messages', {\n    method: 'GET',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n}\n\nexport const fetchLogOut = () => {\n  return fetch('/logout', {\n    method: 'POST'\n  }).then((response) => {\n    if (response.ok) {\n      return;\n    }\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchMessages, fetchAddNewMessage } from './services';\n\nconst MessagePanel = () => {\n    const [error, setError] = useState(\"\");\n    const [messageList, setMessageList] = useState(\"\");\n    const [newMessage, setNewMessage] = useState(\"\");\n\n    useEffect(() => {\n        fetchMessages()\n            .then(messages => {\n                setMessageList(messages);\n            })\n    }, []);\n\n    const addNewMessage = () => {\n        fetchAddNewMessage(newMessage)\n            .then((message) => {\n                let messages = [...messageList];\n                messages.push(message);\n                setMessageList(messages);\n                setNewMessage(\"\");\n            })\n            .catch((err) => {\n                setError(err.message);\n            });\n    };\n\n    let messages = [...messageList];\n    let showMessageList = messages.map((m) =>\n        <li key={m.timestamp}>\n            <span className=\"chat-person\">{m.sender}</span>\n            <span className=\"chat-time\">{m.timestamp}</span>\n            <br></br>\n            <p className=\"chat-message\">{m.text}</p>\n        </li>\n    )\n\n    return (\n        <div className=\"out-going\">\n            <div className=\"message-panel\">\n                <p className=\"error\">{error}</p>\n                {showMessageList}\n            </div>\n            <div>\n                <input value={newMessage} className=\"to-send\" placeholder=\"Type the message\"\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' ? addNewMessage(e) : null} />\n                <button onClick={addNewMessage}>Send</button>\n            </div>\n        </div>\n    )\n}\n\nexport default MessagePanel;","import React, { useState, useEffect } from 'react';\nimport { fetchActiveUsers } from './services';\n\nexport default function UserBar({username}) {\n    const [userList, setUserList] = useState(\"\");\n\n    useEffect(() => {\n        fetchActiveUsers()\n            .then(users => {\n                setUserList(users);\n            })\n    }, []);\n\n    let usernames = Object.values(userList).map(user => (\n        <li className=\"user-name\" key={user.uid}>\n            {user.username}\n        </li>\n    ));\n    return (\n        <div className=\"user-panel\">\n            <div className=\"welcome\">Hello {username} ツ</div>\n            <div className=\"user-title\">\n            <span>Active people</span>\n            </div>\n            {usernames}\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport {fetchLogOut} from './services';\n\nconst Logout = ({ onLogout }) => {\n    const performLogout = () => {\n        fetchLogOut()\n            .then(() => onLogout());\n    };\n    return (\n        <div className=\"logout\">\n            <button onClick={performLogout}>Logout</button>\n        </div>\n    )\n}\n\nexport default Logout;","import React, { useState, useEffect } from 'react';\nimport Login from './Login';\nimport { fetchLoginStatus } from './services';\nimport MessagePanel from './MessagePanel';\nimport UserBar from './UserBar';\nimport Logout from './Logout';\nimport './App.css';\n\nexport default function App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false, username: \"\" });\n  useEffect(() => {\n    fetchLoginStatus()\n      .then(userInfo => {\n        setUserState({\n          isLoggedIn: true,\n          username: userInfo.username,\n        });\n      });\n  }, []);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n      username: username,\n    });\n  }\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false,\n      username: \"\",\n    });\n  }\n\n  return (\n    <div>{userState.isLoggedIn ?\n      <div className=\"chat-app\">\n        <div className=\"display-panel\">\n          <UserBar username={userState.username}/>\n          <MessagePanel />\n        </div>\n        <div className=\"logout-panel\">\n          <Logout onLogout={logout} />\n        </div>\n      </div> :\n      <Login user={userState} onLogin={login} />}\n    </div>\n  )\n};\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
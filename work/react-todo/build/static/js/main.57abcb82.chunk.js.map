{"version":3,"sources":["services.js","Login.jsx","Logout.jsx","CreatePage.jsx","UpdatePage.jsx","DetailPage.jsx","Filter.jsx","Sort.jsx","Theme.jsx","TodoPanel.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fetchAllTasks","username","fetch","method","catch","Promise","reject","code","then","response","ok","json","fetchUpdateTask","taskId","taskName","taskContent","isComplete","headers","Headers","body","JSON","stringify","task","result","Login","user","onLogin","useState","error","setError","isLoading","setIsLoading","setUsername","performLogin","fetchLogIn","err","message","className","placeholder","onChange","e","target","value","onKeyPress","key","onClick","Logout","onLogout","CreatePage","setCreate","todoList","newTaskContent","setNewTaskContent","newTaskName","setNewTaskName","fetchAddNewTask","inputTask","data","push","UpdatePage","setUpdate","clickedTaskId","clickedTaskName","clickedTaskContent","onUpdateSuccess","DetailPage","setView","Filter","onFilter","Sort","onSort","Theme","updateTheme","TodoPanel","setTodoList","update","create","view","setClickedTaskId","setClickedTaskName","setClickedTaskContent","theme","setTheme","useEffect","tasks","Object","values","themeStyle","backgroundColor","removeOneTask","index","fetchRemoveOneTask","filter","todo","newTodos","t","isActive","setIsActive","showTaskList","map","completeTodo","style","clickedTheme","fetchUpdateTheme","filteredTask","sort","sortedList","undoList","doneList","a","b","localeCompare","concat","currentList","App","isLoggedIn","userState","setUserState","sessionInfo","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57abcb82.chunk.js","sourcesContent":["export const fetchLoginStatus = () => {\n  return fetch('/session', {\n    method: 'GET',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return Promise.reject({ code: 'login-invalid' });\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogIn = (username) => {\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ username }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchAllTasks = (username) => {\n  return fetch(`/tasks/${username}`, {\n    method: 'GET',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return Promise.reject({ code: 'login-invalid' });\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogOut = () => {\n  return fetch('/session', {\n    method: 'DELETE'\n  }).then((response) => {\n    if (response.ok) {\n      return;\n    }\n  });\n};\n\nexport const fetchAddNewTask = (username, taskName, taskContent, isComplete) => {\n  return fetch(`/tasks/${username}`, {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ task: { taskName : taskName, taskContent: taskContent, isComplete: isComplete } }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchRemoveOneTask = (username, taskId) => {\n  return fetch(`/tasks/${username}/${taskId}`, {\n    method: 'DELETE',\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchUpdateTask = (username, taskId, taskName, taskContent, isComplete) => {\n  return fetch(`/tasks/${username}/${taskId}`, {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ task: { taskName : taskName, taskContent: taskContent, isComplete: isComplete } }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchUpdateTheme = (username, theme) => {\n  return fetch(`/theme/${username}`, {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ theme : theme }),\n  })\n    .catch(() => {\n      return Promise.reject({ code: 'network-error' });\n    })\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport { fetchLogIn } from './services';\n\nconst Login = ({ user, onLogin }) => {\n    const [error, setError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [username, setUsername] = useState(\"\");\n\n    const performLogin = () => {\n        if (!username) {\n            setError(\"Invalid username, try again!\");\n            return;\n        }\n        setError('');\n        setIsLoading(true);\n\n        fetchLogIn(username)\n            .then(() => onLogin(username))\n            .catch((err) => {\n                setError(err.message);\n                setIsLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"login\">\n            <p className=\"error\">{error}</p>\n            {isLoading ? <span>Loading...</span> :\n                <div>\n                    <h2>Please Login</h2>\n                    <div className=\"input-username\">\n                        <input placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' ? performLogin(e) : null} />\n                        <button onClick={performLogin} >Login</button>\n                    </div>\n                </div>}\n        </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport { fetchLogOut } from './services';\n\nconst Logout = ({ onLogout }) => {\n    const performLogout = () => {\n        fetchLogOut()\n            .then(() => onLogout());\n    };\n    return (\n        <div className=\"logout\">\n            <button onClick={performLogout}>Logout</button>\n        </div>\n    );\n};\n\nexport default Logout;\n","import React, { useState } from 'react';\nimport { fetchAddNewTask } from './services';\n\nexport default function CreatePage({ setCreate, username, todoList}) {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const [newTaskName, setNewTaskName] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const addNewTask = () => {\n        fetchAddNewTask(username, newTaskName, newTaskContent, false)\n            .then((task) => {\n                const inputTask = task.data;\n                todoList.push(inputTask);\n                setCreate(false);\n            })\n            .catch((err) => {\n                setError(err.message);\n            });\n    };\n\n    const backButtonHandler = () => {\n        setCreate(false);\n    };\n\n    return (\n        <div className=\"create-page\">\n            <p>{error}</p>\n            <input value={newTaskName} onChange={(e) => setNewTaskName(e.target.value)} placeholder=\"Enter task name...\"></input>\n            <br />\n            <textarea value={newTaskContent} onChange={(e) => setNewTaskContent(e.target.value)} placeholder=\"Enter task details...\"></textarea>\n            <br />\n            <button className=\"button\" onClick={addNewTask}>ADD</button>\n            <button className=\"button\" onClick={backButtonHandler}>BACK</button>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { fetchUpdateTask } from './services';\n\nexport default function UpdatePage({ setUpdate, username, clickedTaskId, clickedTaskName, clickedTaskContent, onUpdateSuccess }) {\n    const [newTaskContent, setNewTaskContent] = useState(clickedTaskContent);\n    const [newTaskName, setNewTaskName] = useState(clickedTaskName);\n\n    const updateTask = (taskId) => {\n        fetchUpdateTask(username, taskId, newTaskName, newTaskContent, false)\n            .then((task) => {\n                onUpdateSuccess(task.data);\n            });\n    };\n\n    const backButtonHandler = () => {\n        setUpdate(false);\n    };\n\n    return (\n        <div className=\"update-page\">\n            <label>Task name: </label>\n            <input value={newTaskName} onChange={(e) => setNewTaskName(e.target.value)}></input>\n            <br />\n            <label>Task details: </label>\n            <textarea value={newTaskContent} onChange={(e) => setNewTaskContent(e.target.value)}></textarea>\n            <br />\n            <button className=\"button\" onClick={() => updateTask(clickedTaskId)}>Update</button>\n            <button className=\"button\" onClick={backButtonHandler}>Back</button>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function DetailPage({ setView, clickedTaskName, clickedTaskContent }) {\n    const backButtonHandler = () => {\n        setView(false);\n    }; \n    \n    return (\n        <div className=\"detail-page\">\n            <div className=\"task-name\">\n                <h3>Task Name: </h3><span>{clickedTaskName}</span>\n            </div>\n            <div className=\"task-details\">\n                <h3>Task Details: </h3><p>{clickedTaskContent}</p>\n            </div>\n            <button className=\"button\" onClick={backButtonHandler}>Back</button>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport default function Filter({ onFilter}) {\n    return (\n        <div className=\"filter-bar\">\n            <label>Filter: </label>\n            <select onChange={(e) => onFilter(e.target.value)}>\n                <option value=\"all\">All</option>\n                <option value=\"undo\">Todo</option>\n            </select>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport default function Sort({onSort}) {\n    return (\n        <div className=\"sort-bar\">\n            <label>Sort: </label>\n            <select onChange={(e) => onSort(e.target.value)}>\n                <option value=\"default\">Default</option>\n                <option value=\"up\">By name ascending</option>\n                <option value=\"down\">By name descending</option>\n                <option value=\"byUndo\">By todo</option>\n                <option value=\"byDone\">By completed</option>\n            </select>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport default function Theme({updateTheme}) {\n    return (\n        <div className=\"theme-bar\">\n            <label>Theme: </label>\n            <select onChange={(e) => updateTheme(e.target.value)}>\n                <option value=\"Default\">Default</option>\n                <option value=\"Dark\">Dark</option>\n                <option value=\"Light\">Light</option>\n                <option value=\"Colorful\">Colorful</option>\n            </select>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchAllTasks, fetchUpdateTask, fetchRemoveOneTask, fetchUpdateTheme } from './services';\nimport CreatePage from './CreatePage';\nimport UpdatePage from './UpdatePage';\nimport DetailPage from './DetailPage';\nimport Filter from './Filter';\nimport Sort from './Sort';\nimport Theme from './Theme';\n\nexport default function TodoPanel({ user }) {\n    const [todoList, setTodoList] = useState([]);\n    const [update, setUpdate] = useState(false);\n    const [create, setCreate] = useState(false);\n    const [view, setView] = useState(false);\n    const username = user.username;\n    const [clickedTaskId, setClickedTaskId] = useState(\"\");\n    const [clickedTaskName, setClickedTaskName] = useState(\"\");\n    const [clickedTaskContent, setClickedTaskContent] = useState(\"\");\n    const [theme, setTheme] = useState(\"Default\");\n\n    useEffect(() => {\n        fetchAllTasks(user.username)\n            .then(tasks => {\n                setTodoList(Object.values(tasks.data));\n            })\n    }, []);\n\n    const updateTheme = (clickedTheme) => {\n        fetchUpdateTheme(user.username, clickedTheme)\n            .then(() => {\n                setTheme(clickedTheme);\n            })\n    };\n\n    const themeStyle = {\n        backgroundColor: theme === \"Dark\" ? \"#333\" :\n            theme === \"Light\" ? \"#ccc\" : theme === \"Colorful\" ? \"red\" : \"\"\n    };\n\n    //Remove button.\n    const removeOneTask = (index) => {\n        fetchRemoveOneTask(user.username, index)\n            .then((task) => {\n                setTodoList(todoList.filter((todo) => todo.taskId !== task.data.taskId));\n            })\n    };\n\n    //Edit button.\n    const editButtonHandler = (taskName, taskContent, taskId) => {\n        setUpdate(true);\n        setClickedTaskId(taskId);\n        setClickedTaskName(taskName);\n        setClickedTaskContent(taskContent);\n    }\n\n    //Create button.\n    const createButtonHandler = () => {\n        setCreate(true);\n    };\n\n    //View button.\n    const viewButtonHandler = (taskName, taskContent) => {\n        setView(true);\n        setClickedTaskName(taskName);\n        setClickedTaskContent(taskContent);\n    }\n\n    const onUpdateSuccess = (task) => {\n        const newTodos = [];\n        for (let t of todoList) {\n            if (t.taskId === task.taskId) {\n                newTodos.push(task);\n            } else {\n                newTodos.push(t);\n            }\n        }\n        setTodoList(newTodos);\n        setUpdate(false);\n    };\n\n    const onFilter = (filter) => {\n        if (filter === \"undo\") {\n            const filteredTask = [];\n            for (let task of todoList) {\n                if (!task.isComplete) {\n                    filteredTask.push(task);\n                }\n            }\n            setTodoList(filteredTask);\n        } else {\n            fetchAllTasks(user.username)\n                .then(tasks => {\n                    setTodoList(Object.values(tasks.data));\n                })\n        }\n    };\n\n    const onSort = (sort) => {\n        const sortedList = [];\n        const undoList = [];\n        const doneList = [];\n        for (let task of todoList) {\n            sortedList.push(task);\n        }\n        for (let task of todoList) {\n            if (!task.isComplete) {\n                undoList.push(task);\n            } else {\n                doneList.push(task);\n            }\n        }\n        if (sort === \"up\") {\n            sortedList.sort((a, b) => a.taskName.localeCompare(b.taskName));\n            setTodoList(sortedList);\n        } else if (sort === \"down\") {\n            sortedList.sort((b, a) => a.taskName.localeCompare(b.taskName));\n            setTodoList(sortedList);\n        } else if (sort === \"byUndo\") {\n            setTodoList(undoList.concat(doneList));\n        } else if (sort === \"byDone\") {\n            setTodoList(doneList.concat(undoList));\n        } else {\n            fetchAllTasks(user.username)\n                .then(tasks => {\n                    setTodoList(Object.values(tasks.data));\n                })\n        }\n    };\n\n    //Done button.\n    const [isActive, setIsActive] = useState(true);\n    const completeTodo = (todo) => {\n        fetchUpdateTask(username, todo.taskId, todo.taskName, todo.taskContent, isActive)\n            .then((task) => {\n                onUpdateSuccess(task.data);\n                setIsActive(!isActive);\n            })\n    };\n\n    //Refresh button.\n    const onRefresh = () => {\n        const currentList = [];\n        for (let task of todoList) {\n            currentList.push(task);\n        }\n        setTodoList(currentList);\n    };\n\n    const showTaskList = todoList.map((todo) => (\n        <li className=\"task-content\" key={todo.taskId}>\n            <span className={todo.isComplete ? \"complete\" : \"\"}>{todo.taskName}</span>\n            <span className=\"done\" onClick={() => completeTodo(todo)}>{todo.isComplete ? \"Undo\" : \"Mark as done\"}</span>\n            <span className=\"view\" onClick={() => viewButtonHandler(todo.taskName, todo.taskContent)}>View</span>\n            <span className=\"edit\" onClick={() => editButtonHandler(todo.taskName, todo.taskContent, todo.taskId)}>Edit</span>\n            <span className=\"remove\" onClick={() => removeOneTask(todo.taskId)}>Remove</span>\n        </li>\n    ));\n\n    return (\n        <div> {create ?\n            <div>\n                <CreatePage setCreate={setCreate}\n                    username={username}\n                    todoList={todoList} />\n            </div> : (update ?\n                <div><UpdatePage\n                    setUpdate={setUpdate}\n                    username={username}\n                    clickedTaskId={clickedTaskId}\n                    clickedTaskName={clickedTaskName}\n                    clickedTaskContent={clickedTaskContent}\n                    onUpdateSuccess={onUpdateSuccess} />\n                </div> : (view ?\n                    <div>\n                        <DetailPage setView={setView}\n                            clickedTaskName={clickedTaskName}\n                            clickedTaskContent={clickedTaskContent} />\n                    </div> :\n                    <div className=\"todo-panel\" style={themeStyle}>\n                        <h1>Task List</h1>\n                        <div className=\"title-bar\">\n                            <Theme updateTheme={updateTheme} />\n                            <Filter onFilter={onFilter} />\n                            <Sort onSort={onSort} />\n                            <button className=\"refresh-bar\" onClick={onRefresh}>Refresh</button>\n                        </div>\n                        {showTaskList}\n                        <button className=\"create\" onClick={createButtonHandler}>CREATE</button>\n                    </div>))}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Logout from './Logout';\nimport { fetchLoginStatus, fetchTheme } from './services';\nimport TodoPanel from './TodoPanel';\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false, username: \"\", theme: \"\"});\n  useEffect(() => {\n    fetchLoginStatus()\n      .then(sessionInfo => {\n        setUserState({\n          isLoggedIn: true,\n          username: sessionInfo.data.username,\n          theme: sessionInfo.data.theme,\n        });\n      });\n  }, []);\n  console.log(\"theme after login: \" + userState.theme)\n  console.log(\"username: \" + userState.username);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n      username: username,\n    });\n  };\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false,\n      username: \"\",\n    });\n  };\n\n  return (\n    <div> {userState.isLoggedIn ?\n      <div>\n        <div><TodoPanel user={userState}/></div>\n        <div><Logout onLogout={logout} /></div>\n      </div> :\n      <Login className=\"login\" user={userState} onLogin={login} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}